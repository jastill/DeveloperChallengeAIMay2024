{
	"info": {
		"_postman_id": "16efd44c-726a-42a2-837b-907105f220d3",
		"name": "Data_Attribute_Recommendation_AI_API_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Get XSUAA OAuth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = JSON.parse(responseBody);",
									"const accessToken = response.access_token;",
									"pm.environment.set(\"accessToken\", accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{clientSecret}}",
								"username": "{{clientId}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authUrl}}/oauth/token?grant_type=client_credentials",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AI API Health",
			"item": [
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {\r",
									"    // stop test execution if health check fails\r",
									"    console.log('Health check failed. Exiting');\r",
									"    postman.setNextRequest(null);\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is OK\", () => {\r",
									"    pm.expect(response.message).to.eql(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is READY\", () => {\r",
									"    pm.expect(response.status).to.eql(\"READY\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/healthz",
						"description": "This gets the health of the AI API endpoints"
					},
					"response": []
				}
			]
		},
		{
			"name": "AI API - File Upload",
			"item": [
				{
					"name": "Upload Dataset Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetSchemaUrl\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-MM/tests/integration/sample-datasetschema.json"
							}
						},
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFile}}"
					},
					"response": []
				},
				{
					"name": "Upload Dataset Schema Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetSchemaUrlHierarchical\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-MM/tests/integration/sample-datasetschema.json"
							}
						},
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Upload Dataset Schema AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetSchemaUrlAutoml\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-MM/tests/integration/sample-datasetschema.json"
							}
						},
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileAutoml}}"
					},
					"response": []
				},
				{
					"name": "Upload Dataset Schema IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetSchemaUrlIorBb\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-MM/tests/integration/sample-datasetschema.json"
							}
						},
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileIorBb}}"
					},
					"response": []
				},
				{
					"name": "Upload Dataset Schema SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetSchemaUrlSocBb\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/C:/Users/I568348/Documents/projects/backup/aicore/FUA/soc_schema.json"
							}
						},
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileSocBb}}"
					},
					"response": []
				},
				{
					"name": "Upload Dataset Schema Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetSchemaUrlRegression\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-MM/tests/integration/sample-datasetschema.json"
							}
						},
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileRegression}}"
					},
					"response": []
				},
				{
					"name": "Upload Dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"inferenceDatasetUrl\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFile}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{folderName}}",
								"{{datasetFile}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Dataset Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetUrlHierarchical\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileHierarchical}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{folderName}}",
								"{{datasetFileHierarchical}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Dataset AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetUrlAutoml\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileAutoml}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{folderName}}",
								"{{datasetFileAutoml}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Dataset IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetUrlIorBb\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileIorBb}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{folderName}}",
								"{{datasetFileIorBb}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Dataset SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetUrlSocBb\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/C:/Users/I568348/Documents/projects/backup/aicore/FUA/soc_data.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileSocBb}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{folderName}}",
								"{{datasetFileSocBb}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Dataset Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"datasetUrlRegression\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileRegression}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{folderName}}",
								"{{datasetFileRegression}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Inference Dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"inferenceDatasetUrl\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFile}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{inferenceFolderName}}",
								"{{inferenceDatasetFile}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Inference Dataset Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"inferenceDatasetUrlHierarchical\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileHierarchical}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{inferenceFolderName}}",
								"{{inferenceDatasetFileHierarchical}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Inference Dataset IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"inferenceDatasetUrlIorBb\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileIorBb}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{inferenceFolderName}}",
								"{{inferenceDatasetFileIorBb}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Inference Dataset SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"inferenceDatasetUrlSocBb\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileSocBb}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{inferenceFolderName}}",
								"{{inferenceDatasetFileSocBb}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Inference Dataset Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = JSON.parse(responseBody);",
									"    const url = response.url;",
									"    pm.environment.set(\"inferenceDatasetUrlRegression\", url);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/sreevishnuab/AIBUS/DAR/ML-MEH-Assembly/dar_end_to_end_tests/bestBuy-singlelabel-small.csv"
							}
						},
						"url": {
							"raw": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileRegression}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"model-manager",
								"v2",
								"lm",
								"files",
								"{{inferenceFolderName}}",
								"{{inferenceDatasetFileRegression}}"
							],
							"query": [
								{
									"key": "overwrite",
									"value": "True",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AI API - Model Training and Deployment",
			"item": [
				{
					"name": "Scenarios",
					"item": [
						{
							"name": "List Scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response\r",
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"const count = jsonData.count;\r",
											"pm.test(\"Number of scenarios is 5\", function () {\r",
											"    pm.expect(count).to.at.least(parseInt(pm.variables.get(\"numScenarios\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/scenarios"
							},
							"response": []
						},
						{
							"name": "Get Scenario Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response\r",
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"const scenarioId = jsonData.id;\r",
											"pm.test(\"Scenario ID is correct\", function () {\r",
											"    pm.expect(scenarioId).to.eql(pm.variables.get(\"scenarioId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/scenarios/{{scenarioId}}"
							},
							"response": []
						},
						{
							"name": "Get Scenario Versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response\r",
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"const count = jsonData.count;\r",
											"pm.test(\"Number of scenario versions is 2\", function () {\r",
											"    pm.expect(count).to.eql(parseInt(pm.variables.get(\"numScenarioVersions\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/scenarios/{{scenarioId}}/versions"
							},
							"response": []
						}
					]
				},
				{
					"name": "Artifacts",
					"item": [
						{
							"name": "List Artifacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/artifacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"artifacts"
									],
									"query": [
										{
											"key": "kind",
											"value": "model",
											"disabled": true
										},
										{
											"key": "scenarioId",
											"value": "{{scenarioId}}",
											"disabled": true
										},
										{
											"key": "executionId",
											"value": "{{executionId}}",
											"disabled": true
										},
										{
											"key": "name",
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "10",
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Dataset Schema Artifact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetSchemaArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetSchemaArtifactId}`);",
											"    pm.environment.set(\"datasetSchemaArtifactId\", datasetSchemaArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Schema\",\n  \"kind\": \"other\",\n  \"name\": \"dar-sample-dataset-schema\",\n  \"url\": \"{{datasetSchemaUrl}}\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Schema Artifact Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetSchemaArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetSchemaArtifactId}`);",
											"    pm.environment.set(\"datasetSchemaArtifactIdHierarchical\", datasetSchemaArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Schema Hierarchical\",\n  \"kind\": \"other\",\n  \"name\": \"dar-sample-dataset-schema-hierarchical\",\n  \"url\": \"{{datasetSchemaUrlHierarchical}}\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Schema Artifact AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetSchemaArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetSchemaArtifactId}`);",
											"    pm.environment.set(\"datasetSchemaArtifactIdAutoml\", datasetSchemaArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Schema AutoML\",\n  \"kind\": \"other\",\n  \"name\": \"dar-sample-dataset-schema-automl\",\n  \"url\": \"{{datasetSchemaUrlAutoml}}\",\n  \"scenarioId\": \"{{scenarioIdAutoml}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Schema Artifact IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetSchemaArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetSchemaArtifactId}`);",
											"    pm.environment.set(\"datasetSchemaArtifactIdIorBb\", datasetSchemaArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Schema IOR BB\",\n  \"kind\": \"other\",\n  \"name\": \"dar-sample-dataset-schema-ior-bb\",\n  \"url\": \"{{datasetSchemaUrlIorBb}}\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Schema Artifact SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetSchemaArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetSchemaArtifactId}`);",
											"    pm.environment.set(\"datasetSchemaArtifactIdSocBb\", datasetSchemaArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Schema SOC BB\",\n  \"kind\": \"other\",\n  \"name\": \"dar-sample-dataset-schema-soc-bb\",\n  \"url\": \"{{datasetSchemaUrlSocBb}}\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Schema Artifact Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetSchemaArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetSchemaArtifactId}`);",
											"    pm.environment.set(\"datasetSchemaArtifactIdRegression\", datasetSchemaArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Schema Regression\",\n  \"kind\": \"other\",\n  \"name\": \"dar-sample-dataset-schema-regression\",\n  \"url\": \"{{datasetSchemaUrlRegression}}\",\n  \"scenarioId\": \"{{scenarioIdRegression}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Artifact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetArtifactId = response.id;",
											"    console.log(`Dataset artifact id: ${datasetArtifactId}`);",
											"    pm.environment.set(\"datasetArtifactId\", datasetArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-dataset\",\n  \"url\": \"{{datasetUrl}}\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Artifact Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const dataset_artifact_id = response.id;",
											"    console.log(`Dataset artifact id: ${dataset_artifact_id}`);",
											"    pm.environment.set(\"datasetArtifactIdHierarchical\", dataset_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Hierarchical scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-dataset-hierarchical\",\n  \"url\": \"{{datasetUrlHierarchical}}\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Artifact AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const dataset_artifact_id = response.id;",
											"    console.log(`Dataset artifact id: ${dataset_artifact_id}`);",
											"    pm.environment.set(\"dataset_artifact_id_automl\", dataset_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset AutoML scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-dataset-automl\",\n  \"url\": \"{{datasetUrlAutoml}}\",\n  \"scenarioId\": \"{{scenarioIdAutoml}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Artifact IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const dataset_artifact_id = response.id;",
											"    console.log(`Dataset artifact id: ${dataset_artifact_id}`);",
											"    pm.environment.set(\"datasetArtifactIdIorBb\", dataset_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset IOR BB scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-dataset-ior-bb\",\n  \"url\": \"{{datasetUrlIorBb}}\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Artifact SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const dataset_artifact_id = response.id;",
											"    console.log(`Dataset artifact id: ${dataset_artifact_id}`);",
											"    pm.environment.set(\"datasetArtifactIdSocBb\", dataset_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset SOC BB scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-dataset-soc-bb\",\n  \"url\": \"{{datasetUrlSocBb}}\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Dataset Artifact Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const dataset_artifact_id = response.id;",
											"    console.log(`Dataset artifact id: ${dataset_artifact_id}`);",
											"    pm.environment.set(\"datasetArtifactIdRegression\", dataset_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Dataset Regressin scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-dataset-regression\",\n  \"url\": \"{{datasetUrlRegression}}\",\n  \"scenarioId\": \"{{scenarioIdRegression}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Inference Dataset Artifact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetArtifactId = response.id;",
											"    console.log(`Inference dataset artifact id: ${datasetArtifactId}`);",
											"    pm.environment.set(\"inferenceDatasetArtifactId\", datasetArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Inference Dataset\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-inference-dataset\",\n  \"url\": \"{{inferenceDatasetUrl}}\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Inference Dataset Artifact Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetArtifactId = response.id;",
											"    console.log(`Inference dataset artifact id hierarchical: ${datasetArtifactId}`);",
											"    pm.environment.set(\"inferenceDatasetArtifactIdHierarchical\", datasetArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Inference Dataset Hierarchical Scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-inference-dataset-hierarchical\",\n  \"url\": \"{{inferenceDatasetUrlHierarchical}}\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Inference Dataset Artifact IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetArtifactId = response.id;",
											"    console.log(`Inference dataset artifact id IOR BB: ${datasetArtifactId}`);",
											"    pm.environment.set(\"inferenceDatasetArtifactIdIorBb\", datasetArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Inference Dataset IOR BB Scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-inference-dataset-ior-bb\",\n  \"url\": \"{{inferenceDatasetUrlIorBb}}\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Inference Dataset Artifact SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetArtifactId = response.id;",
											"    console.log(`Inference dataset artifact id SOC BB: ${datasetArtifactId}`);",
											"    pm.environment.set(\"inferenceDatasetArtifactIdSocBb\", datasetArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Inference Dataset SOC BB Scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-inference-dataset-soc-bb\",\n  \"url\": \"{{inferenceDatasetUrlSocBb}}\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Create Inference Dataset Artifact Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = JSON.parse(responseBody);",
											"    const datasetArtifactId = response.id;",
											"    console.log(`Inference dataset artifact id regression: ${datasetArtifactId}`);",
											"    pm.environment.set(\"inferenceDatasetArtifactIdRegression\", datasetArtifactId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"labels\": [],\n  \"description\": \"Example DAR Inference Dataset Regression Scenario\",\n  \"kind\": \"dataset\",\n  \"name\": \"dar-sample-inference-dataset-regression\",\n  \"url\": \"{{inferenceDatasetUrlRegression}}\",\n  \"scenarioId\": \"{{scenarioIdRegression}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/artifacts"
							},
							"response": []
						},
						{
							"name": "Get Artifact Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response\r",
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"const id = jsonData.id;\r",
											"pm.test(\"Dataset artifact id is correct\", function () {\r",
											"    pm.expect(id).to.eql(pm.variables.get(\"datasetArtifactId\"));\r",
											"});\r",
											"\r",
											"const scenarioId = jsonData.scenarioId;\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(scenarioId).to.eql(pm.variables.get(\"scenarioId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/artifacts/{{datasetArtifactId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Executables",
					"item": [
						{
							"name": "List Executables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/scenarios/{{scenarioId}}/executables",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"scenarios",
										"{{scenarioId}}",
										"executables"
									],
									"query": [
										{
											"key": "versionId",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Executable Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = JSON.parse(responseBody);\r",
											"const description = jsonData.description\r",
											"const id = jsonData.id;\r",
											"const scenarioId = jsonData.scenarioId;\r",
											"\r",
											"pm.test(\"Id is correct\", () => {\r",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutableId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Description is correct\", () => {\r",
											"    pm.expect(description).to.eql(\"Generic Template of DAR\")\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", () => {\r",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/scenarios/{{scenarioId}}/executables/{{trainingExecutableId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Training Configurations",
					"item": [
						{
							"name": "List Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/configurations",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"configurations"
									],
									"query": [
										{
											"key": "scenarioId",
											"value": "{{scenarioId}}",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "10",
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Training Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const training_configuration_id = response.id;",
											"    console.log(`Training configuration id: ${training_configuration_id}`);",
											"    pm.environment.set(\"trainingConfigurationId\", training_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"test_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`Model name: ${random_name}`);\r",
											"pm.environment.set(\"modelName\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{trainingExecutableId}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"datasetSchema\", \n      \"artifactId\": \"{{datasetSchemaArtifactId}}\"\n   },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactId}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelName}}\"\n    }\n  ],\n  \"name\": \"Test Training\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Training Configuration Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const training_configuration_id = response.id;",
											"    console.log(`Hierarchical training configuration id: ${training_configuration_id}`);",
											"    pm.environment.set(\"trainingConfigurationIdHierarchical\", training_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"hierarchical_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`Hierarchical model name: ${random_name}`)\r",
											"pm.environment.set(\"modelNameHierarchical\", random_name)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{trainingExecutableIdHierarchical}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"datasetSchema\", \n      \"artifactId\": \"{{datasetSchemaArtifactIdHierarchical}}\"\n    },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdHierarchical}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelNameHierarchical}}\"\n    }\n  ],\n  \"name\": \"Test Training Hierarchical\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Training Configuration AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const training_configuration_id = response.id;",
											"    console.log(`AutoML training configuration id: ${training_configuration_id}`);",
											"    pm.environment.set(\"trainingConfigurationIdAutoml\", training_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"automl_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`AutoML model name: ${random_name}`);\r",
											"pm.environment.set(\"modelNameAutoml\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{trainingExecutableIdAutoml}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"datasetSchema\", \n      \"artifactId\": \"{{datasetSchemaArtifactIdAutoml}}\"\n    },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdAutoml}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelNameAutoml}}\"\n    }\n  ],\n  \"name\": \"Test Training AutoML\",\n  \"scenarioId\": \"{{scenarioIdAutoml}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Training Configuration Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const training_configuration_id = response.id;",
											"    console.log(`Regression training configuration id: ${training_configuration_id}`);",
											"    pm.environment.set(\"trainingConfigurationIdRegression\", training_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"automl_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`AutoML model name: ${random_name}`);\r",
											"pm.environment.set(\"modelNameRegression\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{trainingExecutableIdRegression}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"datasetSchema\", \n      \"artifactId\": \"{{datasetSchemaArtifactIdRegression}}\"\n    },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdRegression}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelNameRegression}}\"\n    }\n  ],\n  \"name\": \"Test Training Regression\",\n  \"scenarioId\": \"{{scenarioIdRegression}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Training Configuration IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const training_configuration_id = response.id;",
											"    console.log(`IOR BB training configuration id: ${training_configuration_id}`);",
											"    pm.environment.set(\"trainingConfigurationIdIorBb\", training_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"automl_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`AutoML model name: ${random_name}`);\r",
											"pm.environment.set(\"modelNameAutoml\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{trainingExecutableIdIorBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"datasetSchema\", \n      \"artifactId\": \"{{datasetSchemaArtifactIdIorBb}}\"\n    },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdIorBb}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelNameIorBb}}\"\n    }\n  ],\n  \"name\": \"Test Training IOR BB\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Training Configuration SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const training_configuration_id = response.id;",
											"    console.log(`SOC BB training configuration id: ${training_configuration_id}`);",
											"    pm.environment.set(\"trainingConfigurationIdSocBb\", training_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"automl_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`AutoML model name: ${random_name}`);\r",
											"pm.environment.set(\"modelNameAutoml\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{trainingExecutableIdSocBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"datasetSchema\", \n      \"artifactId\": \"{{datasetSchemaArtifactIdSocBb}}\"\n    },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdSocBb}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelNameSocBb}}\"\n    }\n  ],\n  \"name\": \"Test Training SOC BB\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Transfer Learning configuration id: ${transfer_learning_configuration_id}`);",
											"    pm.environment.set(\"transferLearningConfigurationId\", transfer_learning_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"test_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`Model name: ${random_name}`);\r",
											"pm.environment.set(\"modelName\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{transferLearningExecutableId}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactId}}\"\n   },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactId}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelName}}\"\n    }\n  ],\n  \"name\": \"Test Transfer Learning\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Configuration Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Transfer Learning configuration id: ${transfer_learning_configuration_id}`);",
											"    pm.environment.set(\"transferLearningConfigurationIdHierarchical\", transfer_learning_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"test_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`Model name: ${random_name}`);\r",
											"pm.environment.set(\"modelName\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{transferLearningExecutableIdHierarchical}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdHierarchical}}\"\n   },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdHierarchical}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelName}}\"\n    }\n  ],\n  \"name\": \"Test Transfer Learning Hierarchical Scenario\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Configuration IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Transfer Learning configuration id: ${transfer_learning_configuration_id}`);",
											"    pm.environment.set(\"transferLearningConfigurationIdIorBb\", transfer_learning_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"test_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`Model name: ${random_name}`);\r",
											"pm.environment.set(\"modelName\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{transferLearningExecutableIdIorBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdIorBb}}\"\n   },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdIorBb}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelName}}\"\n    }\n  ],\n  \"name\": \"Test Transfer Learning IOR BB Scenario\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Configuration SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Transfer Learning configuration id: ${transfer_learning_configuration_id}`);",
											"    pm.environment.set(\"transferLearningConfigurationIdSocBb\", transfer_learning_configuration_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let random_name = \"test_model_\";\r",
											"random_name += Math.random().toString().replace(\"0.\", \"\");\r",
											"console.log(`Model name: ${random_name}`);\r",
											"pm.environment.set(\"modelName\", random_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{transferLearningExecutableIdSocBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdSocBb}}\"\n   },{\n      \"key\": \"dataset\", \n      \"artifactId\": \"{{datasetArtifactIdSocBb}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"modelName\",\n      \"value\": \"{{modelName}}\"\n    }\n  ],\n  \"name\": \"Test Transfer Learning SOC BB Scenario\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Batch Inference configuration id: ${batchInferenceConfigurationId}`);",
											"    pm.environment.set(\"batchInferenceConfigurationId\", batchInferenceConfigurationId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{batchInferenceExecutableId}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactId}}\"\n   },{\n      \"key\": \"inferenceDataset\", \n      \"artifactId\": \"{{inferenceDatasetArtifactId}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"topN\",\n      \"value\": \"{{topN}}\"\n    }\n  ],\n  \"name\": \"Test Batch Inference\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Configuration Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Batch Inference configuration id hierarchical: ${batchInferenceConfigurationId}`);",
											"    pm.environment.set(\"batchInferenceConfigurationIdHierarchical\", batchInferenceConfigurationId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{batchInferenceExecutableIdHierarchical}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdHierarchical}}\"\n   },{\n      \"key\": \"inferenceDataset\", \n      \"artifactId\": \"{{inferenceDatasetArtifactIdHierarchical}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"topN\",\n      \"value\": \"{{topN}}\"\n    }\n  ],\n  \"name\": \"Test Batch Inference Hierarchical Scenario\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Configuration IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Batch Inference configuration id IOR BB: ${batchInferenceConfigurationId}`);",
											"    pm.environment.set(\"batchInferenceConfigurationIdIorBb\", batchInferenceConfigurationId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{batchInferenceExecutableIdIorBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdIorBb}}\"\n   },{\n      \"key\": \"inferenceDataset\", \n      \"artifactId\": \"{{inferenceDatasetArtifactIdIorBb}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"topN\",\n      \"value\": \"{{topN}}\"\n    }\n  ],\n  \"name\": \"Test Batch Inference IOR BB Scenario\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Configuration SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Batch Inference configuration id SOC BB: ${batchInferenceConfigurationId}`);",
											"    pm.environment.set(\"batchInferenceConfigurationIdSocBb\", batchInferenceConfigurationId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{batchInferenceExecutableIdSocBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdSocBb}}\"\n   },{\n      \"key\": \"inferenceDataset\", \n      \"artifactId\": \"{{inferenceDatasetArtifactIdSocBb}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"topN\",\n      \"value\": \"{{topN}}\"\n    }\n  ],\n  \"name\": \"Test Batch Inference SOC BB Scenario\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Configuration Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const msg = response.message;",
											"",
											"pm.test(\"Message is correct\", () => {",
											"    pm.expect(msg).to.eql(\"Configuration created\");",
											"    const transfer_learning_configuration_id = response.id;",
											"    console.log(`Batch Inference configuration id Regression: ${batchInferenceConfigurationId}`);",
											"    pm.environment.set(\"batchInferenceConfigurationIdRegression\", batchInferenceConfigurationId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{batchInferenceExecutableIdRegression}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdRegression}}\"\n   },{\n      \"key\": \"inferenceDataset\", \n      \"artifactId\": \"{{inferenceDatasetArtifactIdRegression}}\"\n   }],\n  \"parameterBindings\": [\n    {\n      \"key\": \"topN\",\n      \"value\": \"{{topN}}\"\n    }\n  ],\n  \"name\": \"Test Batch Inference Regression Scenario\",\n  \"scenarioId\": \"{{scenarioIdRegression}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Get Training Configuration Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"const id = response.id;\r",
											"const executableId = response.executableId;\r",
											"const scenarioId = response.scenarioId;\r",
											"\r",
											"pm.test(\"Id is correct\", () => {\r",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingConfigurationId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Executable id is correct\", () => {\r",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", () => {\r",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{trainingConfigurationId}}"
							},
							"response": []
						},
						{
							"name": "Get Transfer Learning Configuration Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"const id = response.id;\r",
											"const executableId = response.executableId;\r",
											"const scenarioId = response.scenarioId;\r",
											"\r",
											"pm.test(\"Id is correct\", () => {\r",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingConfigurationId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Executable id is correct\", () => {\r",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", () => {\r",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{transferLearningConfigurationId}}"
							},
							"response": []
						},
						{
							"name": "Get Batch Inference Configuration Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"const id = response.id;\r",
											"const executableId = response.executableId;\r",
											"const scenarioId = response.scenarioId;\r",
											"\r",
											"pm.test(\"Id is correct\", () => {\r",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingConfigurationId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Executable id is correct\", () => {\r",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", () => {\r",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{batchInferenceConfigurationId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Executions",
					"item": [
						{
							"name": "List Executions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/executions",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"executions"
									],
									"query": [
										{
											"key": "configurationId",
											"value": "{{configurationId}}",
											"disabled": true
										},
										{
											"key": "scenarioId",
											"value": "{{scenarioId}}",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "10",
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Training Execution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const training_execution_id = response.id;",
											"console.log(`Training execution id: ${training_execution_id}`);",
											"pm.environment.set(\"trainingExecutionId\", training_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{trainingConfigurationId}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Training Execution Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const training_execution_id = response.id;",
											"console.log(`Hierarchical training execution id: ${training_execution_id}`);",
											"pm.environment.set(\"trainingExecutionIdHierarchical\", training_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{trainingConfigurationIdHierarchical}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Training Execution AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const training_execution_id = response.id;",
											"console.log(`AutoML training execution id: ${training_execution_id}`);",
											"pm.environment.set(\"trainingExecutionIdAutoml\", training_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{trainingConfigurationIdAutoml}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Training Execution IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const training_execution_id = response.id;",
											"console.log(`IOR BB training execution id: ${training_execution_id}`);",
											"pm.environment.set(\"trainingExecutionIdIorBb\", training_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{trainingConfigurationIdIorBb}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Training Execution SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const training_execution_id = response.id;",
											"console.log(`SOC BB training execution id: ${training_execution_id}`);",
											"pm.environment.set(\"trainingExecutionIdSocBb\", training_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{trainingConfigurationIdSocBb}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Training Execution Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const training_execution_id = response.id;",
											"console.log(`Regression training execution id: ${training_execution_id}`);",
											"pm.environment.set(\"trainingExecutionIdRegression\", training_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{trainingConfigurationIdRegression}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Execution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const transfer_learning_execution_id = response.id;",
											"console.log(`Transfer Learning execution id: ${transfer_learning_execution_id}`);",
											"pm.environment.set(\"transferLearningExecutionId\", transfer_learning_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{transferLearningConfigurationId}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Execution Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const transfer_learning_execution_id = response.id;",
											"console.log(`Transfer Learning execution id: ${transfer_learning_execution_id}`);",
											"pm.environment.set(\"transferLearningExecutionIdHierarchical\", transfer_learning_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{transferLearningConfigurationIdHierarchical}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Execution IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const transfer_learning_execution_id = response.id;",
											"console.log(`Transfer Learning execution id: ${transfer_learning_execution_id}`);",
											"pm.environment.set(\"transferLearningExecutionIdIorBb\", transfer_learning_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{transferLearningConfigurationIdIorBb}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Transfer Learning Execution SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const transfer_learning_execution_id = response.id;",
											"console.log(`Transfer Learning execution id: ${transfer_learning_execution_id}`);",
											"pm.environment.set(\"transferLearningExecutionIdSocBb\", transfer_learning_execution_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{transferLearningConfigurationIdSocBb}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Execution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const batchInferenceExecutionId = response.id;",
											"console.log(`Batch Inference execution id: ${batchInferenceExecutionId}`);",
											"pm.environment.set(\"batchInferenceExecutionId\", batchInferenceExecutionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{batchInferenceConfigurationId}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Execution Hierachical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const batchInferenceExecutionId = response.id;",
											"console.log(`Batch Inference execution id hierarchical: ${batchInferenceExecutionId}`);",
											"pm.environment.set(\"batchInferenceExecutionIdHierarchical\", batchInferenceExecutionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{batchInferenceConfigurationIdHierarchical}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Execution IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const batchInferenceExecutionId = response.id;",
											"console.log(`Batch Inference execution id IOR BB: ${batchInferenceExecutionId}`);",
											"pm.environment.set(\"batchInferenceExecutionIdIorBb\", batchInferenceExecutionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{batchInferenceConfigurationIdIorBb}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Execution SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const batchInferenceExecutionId = response.id;",
											"console.log(`Batch Inference execution id SOC BB: ${batchInferenceExecutionId}`);",
											"pm.environment.set(\"batchInferenceExecutionIdSocBb\", batchInferenceExecutionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{batchInferenceConfigurationIdSocBb}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Create Batch Inference Execution Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"const batchInferenceExecutionId = response.id;",
											"console.log(`Batch Inference execution id Regression: ${batchInferenceExecutionId}`);",
											"pm.environment.set(\"batchInferenceExecutionIdRegression\", batchInferenceExecutionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{batchInferenceConfigurationIdRegression}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/executions"
							},
							"response": []
						},
						{
							"name": "Get Execution Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"trainingConfigurationId\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableId\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutionId\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactId\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionId}}"
							},
							"response": []
						},
						{
							"name": "Get Execution Details Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"trainingConfigurationIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutionIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Hierarchical model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdHierarchical\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdHierarchical}}"
							},
							"response": []
						},
						{
							"name": "Get Execution Details AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"trainingConfigurationIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutionIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`AutoML model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdAutoml\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdAutoml}}"
							},
							"response": []
						},
						{
							"name": "Get Execution Details IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"trainingConfigurationIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutionIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`IOR BB model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdIorBb\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdIorBb}}"
							},
							"response": []
						},
						{
							"name": "Get Execution Details SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"trainingConfigurationIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutionIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`SOC BB model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdSocBb\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdSocBb}}"
							},
							"response": []
						},
						{
							"name": "Get Execution Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"trainingConfigurationIdRegression\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"trainingExecutableIdRegression\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdRegression\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"trainingExecutionIdRegression\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Regression model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdRegression\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdRegression}}"
							},
							"response": []
						},
						{
							"name": "Get Transfer Learning Execution Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"transferLearningConfigurationId\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"transferLearningExecutableId\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"transferLearningExecutionId\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactId\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{transferLearningExecutionId}}"
							},
							"response": []
						},
						{
							"name": "Get Transfer Learning Execution Details Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"transferLearningConfigurationIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"transferLearningExecutableIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"transferLearningExecutionIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdHierarchical\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{transferLearningExecutionIdHierarchical}}"
							},
							"response": []
						},
						{
							"name": "Get Transfer Learning Execution Details IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"transferLearningConfigurationIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"transferLearningExecutableIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"transferLearningExecutionIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdIorBb\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{transferLearningExecutionIdIorBb}}"
							},
							"response": []
						},
						{
							"name": "Get Transfer Learning Execution Details SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"transferLearningConfigurationIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"transferLearningExecutableIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"transferLearningExecutionIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let model_artifact_id = response.outputArtifacts[0].id;",
											"    console.log(`Model artifact id: ${model_artifact_id}`);",
											"    pm.environment.set(\"modelArtifactIdSocBb\", model_artifact_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{transferLearningExecutionIdSocBb}}"
							},
							"response": []
						},
						{
							"name": "Get Batch Inference Execution Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"batchInferenceConfigurationId\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"batchInferenceExecutableId\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"batchInferenceExecutionId\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let inferenceResultsUrl = response.outputArtifacts[0].url;",
											"    console.log(`Inference result URL: ${inferenceResultsUrl}`);",
											"    pm.environment.set(\"inferenceResultUrl\", inferenceResultsUrl);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{batchInferenceExecutionId}}"
							},
							"response": []
						},
						{
							"name": "Get Batch Inference Execution Details Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"batchInferenceConfigurationIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"batchInferenceExecutableIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"batchInferenceExecutionIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let inferenceResultsUrl = response.outputArtifacts[0].url;",
											"    console.log(`Inference result URL Hierarchical: ${inferenceResultsUrl}`);",
											"    pm.environment.set(\"inferenceResultUrlHierarchical\", inferenceResultsUrl);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{batchInferenceExecutionIdHierarchical}}"
							},
							"response": []
						},
						{
							"name": "Get Batch Inference Execution Details IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"batchInferenceConfigurationIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"batchInferenceExecutableIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"batchInferenceExecutionIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let inferenceResultsUrl = response.outputArtifacts[0].url;",
											"    console.log(`Inference result URL IOR BB: ${inferenceResultsUrl}`);",
											"    pm.environment.set(\"inferenceResultUrlIorBb\", inferenceResultsUrl);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{batchInferenceExecutionIdIorBb}}"
							},
							"response": []
						},
						{
							"name": "Get Batch Inference Execution Details SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"batchInferenceConfigurationIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"batchInferenceExecutableIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"batchInferenceExecutionIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let inferenceResultsUrl = response.outputArtifacts[0].url;",
											"    console.log(`Inference result URL SOC BB: ${inferenceResultsUrl}`);",
											"    pm.environment.set(\"inferenceResultUrlSocBb\", inferenceResultsUrl);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{batchInferenceExecutionIdSocBb}}"
							},
							"response": []
						},
						{
							"name": "Get Batch Inference Execution Details Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function() {",
											"    console.log(`Current status: ${response.status}`);",
											"    return  response.status === response.targetStatus;",
											"}, numberOfIterations=40, sleepPeriod=45);",
											"",
											"if (! donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const executableId = response.executableId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"batchInferenceConfigurationIdRegression\"));",
											"});",
											"",
											"pm.test(\"Executable id is correct\", () => {",
											"    pm.expect(executableId).to.eql(pm.environment.get(\"batchInferenceExecutableIdRegression\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdRegression\"));",
											"});",
											"",
											"pm.test(\"Execution id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"batchInferenceExecutionIdRegression\"));",
											"});",
											"",
											"pm.test(\"Status is COMPLETED\", () => {",
											"    pm.expect(response.status).to.eql(\"COMPLETED\");",
											"    let inferenceResultsUrl = response.outputArtifacts[0].url;",
											"    console.log(`Inference result URL Regression: ${inferenceResultsUrl}`);",
											"    pm.environment.set(\"inferenceResultUrlRegression\", inferenceResultsUrl);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/executions/{{batchInferenceExecutionIdRegression}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Metrics",
					"item": [
						{
							"name": "Get Metric Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"const resources = responseBody.resources;\r",
											"\r",
											"pm.test(\"Execution id is correct\", () => {\r",
											"    pm.expect(resources[0].executionId).to.eql(pm.environment.get(\"trainingExecutionId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/metrics?executionIds={{trainingExecutionId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"metrics"
									],
									"query": [
										{
											"key": "executionIds",
											"value": "{{trainingExecutionId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deployment Configurations",
					"item": [
						{
							"name": "List Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/configurations",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"configurations"
									],
									"query": [
										{
											"key": "scenarioId",
											"value": "{{scenarioId}}",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "10",
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Deployment Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Configuration created\");",
											"});",
											"",
											"const deployment_configuration_id = response.id;",
											"pm.environment.set(\"deploymentConfigurationId\", deployment_configuration_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{deploymentExecutableId}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactId}}\"\n   }],\n  \"name\": \"Test Deployment\",\n  \"scenarioId\": \"{{scenarioId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Deployment Configuration Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Configuration created\");",
											"});",
											"",
											"const deployment_configuration_id = response.id;",
											"pm.environment.set(\"deploymentConfigurationIdHierarchical\", deployment_configuration_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{deploymentExecutableIdHierarchical}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdHierarchical}}\"\n   }],\n  \"name\": \"Test Deployment Hierarchical\",\n  \"scenarioId\": \"{{scenarioIdHierarchical}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Deployment Configuration AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Configuration created\");",
											"});",
											"",
											"const deployment_configuration_id = response.id;",
											"pm.environment.set(\"deploymentConfigurationIdAutoml\", deployment_configuration_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{deploymentExecutableIdAutoml}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdAutoml}}\"\n   }],\n  \"name\": \"Test Deployment AutoML\",\n  \"scenarioId\": \"{{scenarioIdAutoml}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Deployment Configuration IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Configuration created\");",
											"});",
											"",
											"const deployment_configuration_id = response.id;",
											"pm.environment.set(\"deploymentConfigurationIdIorBb\", deployment_configuration_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{deploymentExecutableIdIorBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdIorBb}}\"\n   }],\n  \"name\": \"Test Deployment IOR BB\",\n  \"scenarioId\": \"{{scenarioIdIorBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Deployment Configuration SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Configuration created\");",
											"});",
											"",
											"const deployment_configuration_id = response.id;",
											"pm.environment.set(\"deploymentConfigurationIdSocBb\", deployment_configuration_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{deploymentExecutableIdSocBb}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdSocBb}}\"\n   }],\n  \"name\": \"Test Deployment SOC BB\",\n  \"scenarioId\": \"{{scenarioIdSocBb}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Create Deployment Configuration Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Configuration created\");",
											"});",
											"",
											"const deployment_configuration_id = response.id;",
											"pm.environment.set(\"deploymentConfigurationIdRegression\", deployment_configuration_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"executableId\": \"{{deploymentExecutableIdRegression}}\",\n  \"inputArtifactBindings\":[{\n      \"key\": \"model\", \n      \"artifactId\": \"{{modelArtifactIdRegression}}\"\n   }],\n  \"name\": \"Test Deployment Regression\",\n  \"scenarioId\": \"{{scenarioIdRegression}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/model-manager/v2/lm/configurations"
							},
							"response": []
						},
						{
							"name": "Get Deployment Configuration Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Deployment configuration id is correct\", function () {\r",
											"    pm.expect(response.executableId).to.eql(pm.environment.get(\"deploymentExecutableId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(response.scenarioId).to.eql(pm.environment.get(\"scenarioId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Deployment executable id is correct\", function () {\r",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"deploymentConfigurationId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{deploymentConfigurationId}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Configuration Details Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Deployment configuration id is correct\", function () {\r",
											"    pm.expect(response.executableId).to.eql(pm.environment.get(\"deploymentExecutableIdHierarchical\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(response.scenarioId).to.eql(pm.environment.get(\"scenarioIdHierarchical\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Deployment executable id is correct\", function () {\r",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"deploymentConfigurationIdHierarchical\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{deploymentConfigurationIdHierarchical}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Configuration Details AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Deployment configuration id is correct\", function () {\r",
											"    pm.expect(response.executableId).to.eql(pm.environment.get(\"deploymentExecutableIdAutoml\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(response.scenarioId).to.eql(pm.environment.get(\"scenarioIdAutoml\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Deployment executable id is correct\", function () {\r",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"deploymentConfigurationIdAutoml\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{deploymentConfigurationIdAutoml}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Configuration Details IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Deployment configuration id is correct\", function () {\r",
											"    pm.expect(response.executableId).to.eql(pm.environment.get(\"deploymentExecutableIdIorBb\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(response.scenarioId).to.eql(pm.environment.get(\"scenarioIdIorBb\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Deployment executable id is correct\", function () {\r",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"deploymentConfigurationIdIorBb\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{deploymentConfigurationIdIorBb}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Configuration Details Soc BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Deployment configuration id is correct\", function () {\r",
											"    pm.expect(response.executableId).to.eql(pm.environment.get(\"deploymentExecutableIdSocBb\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(response.scenarioId).to.eql(pm.environment.get(\"scenarioIdSocBb\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Deployment executable id is correct\", function () {\r",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"deploymentConfigurationIdSocBb\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{deploymentConfigurationIdSocBb}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Configuration Details Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Deployment configuration id is correct\", function () {\r",
											"    pm.expect(response.executableId).to.eql(pm.environment.get(\"deploymentExecutableIdRegression\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Scenario id is correct\", function () {\r",
											"    pm.expect(response.scenarioId).to.eql(pm.environment.get(\"scenarioIdRegression\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Deployment executable id is correct\", function () {\r",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"deploymentConfigurationIdRegression\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/configurations/{{deploymentConfigurationIdRegression}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Deployments",
					"item": [
						{
							"name": "List Deployments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/model-manager/v2/lm/deployments",
									"host": [
										"{{url}}"
									],
									"path": [
										"model-manager",
										"v2",
										"lm",
										"deployments"
									],
									"query": [
										{
											"key": "configurationId",
											"value": "{{configurationId}}",
											"disabled": true
										},
										{
											"key": "scenarioID",
											"value": "{{scenarioId}}",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "10",
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deploy Model",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Deployment scheduled.\");",
											"});",
											"const deployment_id = response.id;",
											"pm.environment.set(\"deploymentId\", deployment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"configurationId\": \"{{deploymentConfigurationId}}\"\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/deployments"
							},
							"response": []
						},
						{
							"name": "Deploy Model Hierarchical",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Deployment scheduled.\");",
											"});",
											"const deployment_id = response.id;",
											"pm.environment.set(\"deploymentIdHierarchical\", deployment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{deploymentConfigurationIdHierarchical}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/deployments"
							},
							"response": []
						},
						{
							"name": "Deploy Model AutoML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Deployment scheduled.\");",
											"});",
											"const deployment_id = response.id;",
											"pm.environment.set(\"deploymentIdAutoml\", deployment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{deploymentConfigurationIdAutoml}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/deployments"
							},
							"response": []
						},
						{
							"name": "Deploy Model IOR BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Deployment scheduled.\");",
											"});",
											"const deployment_id = response.id;",
											"pm.environment.set(\"deploymentIdIorBb\", deployment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{deploymentConfigurationIdIorBb}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/deployments"
							},
							"response": []
						},
						{
							"name": "Deploy Model SOC BB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Deployment scheduled.\");",
											"});",
											"const deployment_id = response.id;",
											"pm.environment.set(\"deploymentIdSocBb\", deployment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{deploymentConfigurationIdSocBb}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/deployments"
							},
							"response": []
						},
						{
							"name": "Deploy Model Regression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"const response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(response.message).to.eql(\"Deployment scheduled.\");",
											"});",
											"const deployment_id = response.id;",
											"pm.environment.set(\"deploymentIdRegression\", deployment_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configurationId\": \"{{deploymentConfigurationIdRegression}}\"\r\n}"
								},
								"url": "{{url}}/model-manager/v2/lm/deployments"
							},
							"response": []
						},
						{
							"name": "Get Deployment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function () {",
											"    return response.status === response.targetStatus;",
											"}, numberOfIterations = 40, sleepPeriod = 45);",
											"",
											"if (!donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"deploymentConfigurationId\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioId\"));",
											"});",
											"",
											"pm.test(\"Deployment id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"deploymentId\"));",
											"});",
											"",
											"pm.test(\"Status is RUNNING\", () => {",
											"    pm.expect(response.status).to.eql(\"RUNNING\");",
											"});",
											"",
											"pm.test(\"Deployment URL is correct\", () => {",
											"    let deploymentUrl = response.deploymentUrl;",
											"    const baseUrl = pm.environment.get(\"url\");",
											"    const modelName = pm.environment.get(\"modelName\");",
											"    const expectedUrl = `${baseUrl}/inference/api/v3/models/${modelName}/versions/1`;",
											"    pm.expect(deploymentUrl).to.eql(expectedUrl);",
											"    pm.environment.set(\"deploymentUrl\", deploymentUrl);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentId}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Hierarchical Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function () {",
											"    return response.status === response.targetStatus;",
											"}, numberOfIterations = 40, sleepPeriod = 45);",
											"",
											"if (!donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"deploymentConfigurationIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Deployment id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"deploymentIdHierarchical\"));",
											"});",
											"",
											"pm.test(\"Status is RUNNING\", () => {",
											"    pm.expect(response.status).to.eql(\"RUNNING\");",
											"});",
											"",
											"pm.test(\"Deployment URL is correct\", () => {",
											"    let deploymentUrl = response.deploymentUrl;",
											"    const baseUrl = pm.environment.get(\"url\");",
											"    const modelName = pm.environment.get(\"modelName_Hierarchical\");",
											"    const expectedUrl = `${baseUrl}/inference/api/v3/models/${modelName}/versions/1`;",
											"    pm.expect(deploymentUrl).to.eql(expectedUrl);",
											"    pm.environment.set(\"deploymentUrlHierarchical\", deploymentUrl);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdHierarchical}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment AutoML Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function () {",
											"    return response.status === response.targetStatus;",
											"}, numberOfIterations = 40, sleepPeriod = 45);",
											"",
											"if (!donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"deploymentConfigurationIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Deployment id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"deploymentIdAutoml\"));",
											"});",
											"",
											"pm.test(\"Status is RUNNING\", () => {",
											"    pm.expect(response.status).to.eql(\"RUNNING\");",
											"});",
											"",
											"pm.test(\"Deployment URL is correct\", () => {",
											"    let deploymentUrl = response.deploymentUrl;",
											"    const baseUrl = pm.environment.get(\"url\");",
											"    const modelName = pm.environment.get(\"modelNameAutoml\");",
											"    const expectedUrl = `${baseUrl}/inference/api/v3/models/${modelName}/versions/1`;",
											"    pm.expect(deploymentUrl).to.eql(expectedUrl);",
											"    pm.environment.set(\"deploymentUrlAutoml\", deploymentUrl);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdAutoml}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment IOR BB details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function () {",
											"    return response.status === response.targetStatus;",
											"}, numberOfIterations = 40, sleepPeriod = 45);",
											"",
											"if (!donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"deploymentConfigurationIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Deployment id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"deploymentIdIorBb\"));",
											"});",
											"",
											"pm.test(\"Status is RUNNING\", () => {",
											"    pm.expect(response.status).to.eql(\"RUNNING\");",
											"});",
											"",
											"pm.test(\"Deployment URL is correct\", () => {",
											"    let deploymentUrl = response.deploymentUrl;",
											"    const baseUrl = pm.environment.get(\"url\");",
											"    const modelName = pm.environment.get(\"modelNameIorBb\");",
											"    const expectedUrl = `${baseUrl}/inference/api/v3/models/${modelName}/versions/1`;",
											"    pm.expect(deploymentUrl).to.eql(expectedUrl);",
											"    pm.environment.set(\"deploymentUrlIorBb\", deploymentUrl);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdIorBb}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment SOC BB details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function () {",
											"    return response.status === response.targetStatus;",
											"}, numberOfIterations = 40, sleepPeriod = 45);",
											"",
											"if (!donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"deploymentConfigurationIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Deployment id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"deploymentIdSocBb\"));",
											"});",
											"",
											"pm.test(\"Status is RUNNING\", () => {",
											"    pm.expect(response.status).to.eql(\"RUNNING\");",
											"});",
											"",
											"pm.test(\"Deployment URL is correct\", () => {",
											"    let deploymentUrl = response.deploymentUrl;",
											"    const baseUrl = pm.environment.get(\"url\");",
											"    const modelName = pm.environment.get(\"modelNameSocBb\");",
											"    const expectedUrl = `${baseUrl}/inference/api/v3/models/${modelName}/versions/1`;",
											"    pm.expect(deploymentUrl).to.eql(expectedUrl);",
											"    pm.environment.set(\"deploymentUrlSocBb\", deploymentUrl);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdSocBb}}"
							},
							"response": []
						},
						{
							"name": "Get Deployment Regression details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);",
											"",
											"eval(pm.variables.get('__test_library__'));",
											"",
											"let donePolling = pollUntilTrueOrExpired(function () {",
											"    return response.status === response.targetStatus;",
											"}, numberOfIterations = 40, sleepPeriod = 45);",
											"",
											"if (!donePolling) {",
											"    // We must call return, or the rest of the test script will be executed!",
											"    return;",
											"}",
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const configurationId = response.configurationId;",
											"const id = response.id;",
											"const scenarioId = response.scenarioId;",
											"",
											"pm.test(\"Configuration id is correct\", () => {",
											"    pm.expect(configurationId).to.eql(pm.environment.get(\"deploymentConfigurationIdRegression\"));",
											"});",
											"",
											"pm.test(\"Scenario id is correct\", () => {",
											"    pm.expect(scenarioId).to.eql(pm.environment.get(\"scenarioIdRegression\"));",
											"});",
											"",
											"pm.test(\"Deployment id is correct\", () => {",
											"    pm.expect(id).to.eql(pm.environment.get(\"deploymentIdRegression\"));",
											"});",
											"",
											"pm.test(\"Status is RUNNING\", () => {",
											"    pm.expect(response.status).to.eql(\"RUNNING\");",
											"});",
											"",
											"pm.test(\"Deployment URL is correct\", () => {",
											"    let deploymentUrl = response.deploymentUrl;",
											"    const baseUrl = pm.environment.get(\"url\");",
											"    const modelName = pm.environment.get(\"modelNameRegression\");",
											"    const expectedUrl = `${baseUrl}/inference/api/v3/models/${modelName}/versions/1`;",
											"    pm.expect(deploymentUrl).to.eql(expectedUrl);",
											"    pm.environment.set(\"deploymentUrlRegression\", deploymentUrl);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdRegression}}"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AI API - Cleanup",
			"item": [
				{
					"name": "Patch Deployment to STOPPED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Deployment modification scheduled\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"targetStatus\": \"STOPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentId}}"
					},
					"response": []
				},
				{
					"name": "Patch Deployment to STOPPED Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Deployment modification scheduled\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"targetStatus\": \"STOPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Patch Deployment to STOPPED AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Deployment modification scheduled\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"targetStatus\": \"STOPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deployment_id_automl}}"
					},
					"response": []
				},
				{
					"name": "Patch Deployment to STOPPED IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Deployment modification scheduled\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"targetStatus\": \"STOPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdIorBb}}"
					},
					"response": []
				},
				{
					"name": "Patch Deployment to STOPPED SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Deployment modification scheduled\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"targetStatus\": \"STOPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdSocBb}}"
					},
					"response": []
				},
				{
					"name": "Patch Deployment to STOPPED Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Deployment modification scheduled\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"targetStatus\": \"STOPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdRegression}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let response = JSON.parse(responseBody)\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current deployment status: ${response.status}`);\r",
									"    return response.status === \"STOPPED\";\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is STOPPED\", function () {\r",
									"    pm.expect(response.status).to.eql(\"STOPPED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentId}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment Hierarchical Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let response = JSON.parse(responseBody)\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current deployment status: ${response.status}`);\r",
									"    return response.status === \"STOPPED\";\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is STOPPED\", function () {\r",
									"    pm.expect(response.status).to.eql(\"STOPPED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment AutoML Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let response = JSON.parse(responseBody)\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current deployment status: ${response.status}`);\r",
									"    return response.status === \"STOPPED\";\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is STOPPED\", function () {\r",
									"    pm.expect(response.status).to.eql(\"STOPPED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdAutoml}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let response = JSON.parse(responseBody)\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current deployment status: ${response.status}`);\r",
									"    return response.status === \"STOPPED\";\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is STOPPED\", function () {\r",
									"    pm.expect(response.status).to.eql(\"STOPPED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdIorBb}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let response = JSON.parse(responseBody)\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current deployment status: ${response.status}`);\r",
									"    return response.status === \"STOPPED\";\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is STOPPED\", function () {\r",
									"    pm.expect(response.status).to.eql(\"STOPPED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdSocBb}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let response = JSON.parse(responseBody)\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current deployment status: ${response.status}`);\r",
									"    return response.status === \"STOPPED\";\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is STOPPED\", function () {\r",
									"    pm.expect(response.status).to.eql(\"STOPPED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdRegression}}"
					},
					"response": []
				},
				{
					"name": "Delete Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentId}}"
					},
					"response": []
				},
				{
					"name": "Delete Deployment Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Delete Deployment AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdAutoml}}"
					},
					"response": []
				},
				{
					"name": "Delete Deployment IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdIorBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Deployment SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdSocBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Deployment Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdRegression}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current message: ${pm.response.json().message}`);\r",
									"    return pm.response.json().message === 'No object with the requested id found';\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentId}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment Hierarchical Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment AutoML Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdAutoml}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment IOR BB Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdIorBb}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment SOC BB Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdSocBb}}"
					},
					"response": []
				},
				{
					"name": "Get Deployment Regression Details Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/deployments/{{deploymentIdRegression}}"
					},
					"response": []
				},
				{
					"name": "Delete Training Execution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionId}}"
					},
					"response": []
				},
				{
					"name": "Delete Training Execution Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Delete Training Execution AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdAutoml}}"
					},
					"response": []
				},
				{
					"name": "Delete Training Execution IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdIorBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Training Execution SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdSocBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Training Execution Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Deletion scheduled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Target status is DELETED\", () => {\r",
									"    pm.expect(response.targetStatus).to.eql(\"DELETED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdRegression}}"
					},
					"response": []
				},
				{
					"name": "Get Execution Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    console.log(`Current message: ${pm.response.json().message}`);\r",
									"    return pm.response.json().message === 'No object with the requested id found';\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionId}}"
					},
					"response": []
				},
				{
					"name": "Get Execution Hierarchical Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Get Execution AutoML Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdAutoml}}"
					},
					"response": []
				},
				{
					"name": "Get Execution IOR BB Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdIorBb}}"
					},
					"response": []
				},
				{
					"name": "Get Execution SOC BB Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdSocBb}}"
					},
					"response": []
				},
				{
					"name": "Get Execution Regression Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.variables.get('__test_library__'));\r",
									"\r",
									"let donePolling = pollUntilTrueOrExpired(function () {\r",
									"    return pm.response.code === 404;\r",
									"}, numberOfIterations = 40, sleepPeriod = 45);\r",
									"\r",
									"if (!donePolling) {\r",
									"    // We must call return, or the rest of the test script will be executed!\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Message is correct\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No object with the requested id found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/executions/{{trainingExecutionIdRegression}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFile}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Schema Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Schema AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileAutoml}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Schema IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileIorBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Schema SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileSocBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Schema Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetSchemaFileRegression}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFile}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileAutoml}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileIorBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileSocBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Dataset Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{folderName}}/{{datasetFileRegression}}"
					},
					"response": []
				},
				{
					"name": "Delete Inference Dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFile}}"
					},
					"response": []
				},
				{
					"name": "Delete Inference Dataset Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileHierarchical}}"
					},
					"response": []
				},
				{
					"name": "Delete Inference Dataset IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileIorBb}}"
					},
					"response": []
				},
				{
					"name": "Delete Inference Dataset SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileRegression}}"
					},
					"response": []
				},
				{
					"name": "Delete Inference Dataset Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{url}}/model-manager/v2/lm/files/{{inferenceFolderName}}/{{inferenceDatasetFileSocBb}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "DAR API - Inference",
			"item": [
				{
					"name": "POST Inference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"const response = JSON.parse(responseBody);\r",
									"var request = JSON.parse(pm.request.body);\r",
									"var topN = request.topN;\r",
									"var numObjects = request.objects.length;\r",
									"\r",
									"// Validate that we obtained the correct number of predictions per level\r",
									"pm.test(\"Number of inference requests is \" + numObjects, function () {\r",
									"    pm.expect(response.predictions.length).to.eql(numObjects)\r",
									"});\r",
									"\r",
									"// Check that each label has topN predictions\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    for (j = 0; j < topN; j++) {\r",
									"        if (response.predictions[i].labels[j].results.length != topN) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Number of predictions for every request is \" + topN, function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// Check that objectId is preserved for all input objects\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    if ('objectId' in request.objects[i]) {\r",
									"        var expectedObjectId = request.objects[i].objectId;\r",
									"        console.log(\"Expected objectId: \" + expectedObjectId);\r",
									"        if (response.predictions[i].objectId !== expectedObjectId) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"ObjectIds were preserved if submitted\", function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"topN\": 2,\n\t\"objects\": [\n\t\t{\n\t\t\t\"objectId\": \"44500f3d-6905-4c47-91f3-749b2ac73fe9\",\n\t\t\t\"features\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\"value\": \"prepare and share your documents\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"manufacturer\",\n\t\t\t\t\t\"value\": \"adobe\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\"value\": \"119.99\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"features\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\"value\": \"otterbox commuter series wallet case for apple iphone 6 compatible with apple iphone 6 silicone inner layer polycarbonate outer layer shock resistant screen protector\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"manufacturer\",\n\t\t\t\t\t\"value\": \"otterbox\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\"value\": \"44.99\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"objectId\": \"003\",\n\t\t\t\"features\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\"value\": \"once upon a time there lived a little developer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"manufacturer\",\n\t\t\t\t\t\"value\": \"my own creation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\"value\": \"0.00\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"
						},
						"url": "{{deploymentUrl}}"
					},
					"response": []
				},
				{
					"name": "POST Inference Hierarchical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"const response = JSON.parse(responseBody);\r",
									"var request = JSON.parse(pm.request.body);\r",
									"var topN = request.topN;\r",
									"var numObjects = request.objects.length;\r",
									"\r",
									"// Validate that we obtained the correct number of predictions per level\r",
									"pm.test(\"Number of inference requests is \" + numObjects, function () {\r",
									"    pm.expect(response.predictions.length).to.eql(numObjects)\r",
									"});\r",
									"\r",
									"// Check that each label has topN predictions\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    for (j = 0; j < topN; j++) {\r",
									"        if (response.predictions[i].labels[j].results.length != topN) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Number of predictions for every request is \" + topN, function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// Check that objectId is preserved for all input objects\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    if ('objectId' in request.objects[i]) {\r",
									"        var expectedObjectId = request.objects[i].objectId;\r",
									"        console.log(\"Expected objectId: \" + expectedObjectId);\r",
									"        if (response.predictions[i].objectId !== expectedObjectId) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"ObjectIds were preserved if submitted\", function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"topN\": 2,\n\t\"objects\": [\n\t\t{\n\t\t\t\"objectId\": \"44500f3d-6905-4c47-91f3-749b2ac73fe9\",\n\t\t\t\"features\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\"value\": \"prepare and share your documents\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"manufacturer\",\n\t\t\t\t\t\"value\": \"adobe\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\"value\": \"119.99\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"features\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\"value\": \"otterbox commuter series wallet case for apple iphone 6 compatible with apple iphone 6 silicone inner layer polycarbonate outer layer shock resistant screen protector\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"manufacturer\",\n\t\t\t\t\t\"value\": \"otterbox\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\"value\": \"44.99\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"objectId\": \"003\",\n\t\t\t\"features\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\"value\": \"once upon a time there lived a little developer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"manufacturer\",\n\t\t\t\t\t\"value\": \"my own creation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\"value\": \"0.00\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"
						},
						"url": "{{deploymentUrlHierarchical}}"
					},
					"response": []
				},
				{
					"name": "POST Inference AutoML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"const response = JSON.parse(responseBody);\r",
									"var request = JSON.parse(pm.request.body);\r",
									"var topN = request.topN;\r",
									"var numObjects = request.objects.length;\r",
									"\r",
									"// Validate that we obtained the correct number of predictions per level\r",
									"pm.test(\"Number of inference requests is \" + numObjects, function () {\r",
									"    pm.expect(response.predictions.length).to.eql(numObjects)\r",
									"});\r",
									"\r",
									"// Check that each label has topN predictions\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    for (j = 0; j < topN - 1; j++) {\r",
									"        console.log(`${i} ${j}`)\r",
									"        console.log(response.predictions[i].labels[j].results);\r",
									"        // if (response.predictions[i].labels[j].results.length != topN) {\r",
									"        //     result = false;\r",
									"        //     break;\r",
									"        // }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Number of predictions for every request is \" + topN, function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// Check that objectId is preserved for all input objects\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    if ('objectId' in request.objects[i]) {\r",
									"        var expectedObjectId = request.objects[i].objectId;\r",
									"        console.log(\"Expected objectId: \" + expectedObjectId);\r",
									"        if (response.predictions[i].objectId !== expectedObjectId) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"ObjectIds were preserved if submitted\", function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topN\": 2,\n    \"objects\": [\n        {\n            \"objectId\": \"optional-identifier-1\",\n            \"features\": [\n                {\n                    \"name\": \"manufacturer\",\n                    \"value\": \"Energizer\"\n                },\n                {\n                    \"name\": \"description\",\n                    \"value\": \"Alkaline batteries; 1.5V\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"value\": \"5.99\"\n                }\n            ]\n        },\n        {\n            \"objectId\": \"optional-identifier-2\",\n            \"features\": [\n                {\n                    \"name\": \"manufacturer\",\n                    \"value\": \"Eidos\"\n                },\n                {\n                    \"name\": \"description\",\n                    \"value\": \"Unravel a grim conspiracy at the brink of Revolution\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"value\": \"19.99\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": "{{deploymentUrlAutoml}}"
					},
					"response": []
				},
				{
					"name": "POST Inference IOR BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"const response = JSON.parse(responseBody);\r",
									"var request = JSON.parse(pm.request.body);\r",
									"var topN = request.topN;\r",
									"var numObjects = request.objects.length;\r",
									"\r",
									"// Validate that we obtained the correct number of predictions per level\r",
									"pm.test(\"Number of inference requests is \" + numObjects, function () {\r",
									"    pm.expect(response.predictions.length).to.eql(numObjects)\r",
									"});\r",
									"\r",
									"// Check that each label has topN predictions\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    for (j = 0; j < topN - 1; j++) {\r",
									"        console.log(`${i} ${j}`)\r",
									"        console.log(response.predictions[i].labels[j].results);\r",
									"        // if (response.predictions[i].labels[j].results.length != topN) {\r",
									"        //     result = false;\r",
									"        //     break;\r",
									"        // }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Number of predictions for every request is \" + topN, function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// Check that objectId is preserved for all input objects\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    if ('objectId' in request.objects[i]) {\r",
									"        var expectedObjectId = request.objects[i].objectId;\r",
									"        console.log(\"Expected objectId: \" + expectedObjectId);\r",
									"        if (response.predictions[i].objectId !== expectedObjectId) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"ObjectIds were preserved if submitted\", function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topN\": 3,\n    \"objects\": [\n        {\n            \"objectId\": \"optional-identifier-1\",\n            \"features\": [\n                {\n                    \"name\": \"BUKRS\",\n                    \"value\": \"ZN02\"\n                },\n                {\n                    \"name\": \"BELNR\",\n                    \"value\": \"1500022169\"\n                },\n                {\n                    \"name\": \"GJAHR\",\n                    \"value\": \"2021\"\n                },\n                {\n                    \"name\": \"BUZEI\",\n                    \"value\": \"3\"\n                },\n                {\n                    \"name\": \"KOART\",\n                    \"value\": \"S\"\n                },\n                {\n                    \"name\": \"WRBTR\",\n                    \"value\": \"162709.54\"\n                },\n                {\n                    \"name\": \"LIFNR\",\n                    \"value\": \"68046473\"\n                },\n                {\n                    \"name\": \"BLART\",\n                    \"value\": \"KN\"\n                },\n                {\n                    \"name\": \"BUDAT\",\n                    \"value\": \"20210331\"\n                },\n                {\n                    \"name\": \"MWSKZ\",\n                    \"value\": \"IF\"\n                }\n            ]\n        },\n        {\n            \"objectId\": \"optional-identifier-2\",\n            \"features\": [\n                {\n                    \"name\": \"BUKRS\",\n                    \"value\": \"ZC04\"\n                },\n                {\n                    \"name\": \"BELNR\",\n                    \"value\": \"1510043834\"\n                },\n                {\n                    \"name\": \"GJAHR\",\n                    \"value\": \"2022\"\n                },\n                {\n                    \"name\": \"BUZEI\",\n                    \"value\": \"176\"\n                },\n                {\n                    \"name\": \"KOART\",\n                    \"value\": \"S\"\n                },\n                {\n                    \"name\": \"WRBTR\",\n                    \"value\": \"19554\"\n                },\n                {\n                    \"name\": \"LIFNR\",\n                    \"value\": \"69089950\"\n                },\n                {\n                    \"name\": \"BLART\",\n                    \"value\": \"KN\"\n                },\n                {\n                    \"name\": \"BUDAT\",\n                    \"value\": \"20220326\"\n                },\n                {\n                    \"name\": \"MWSKZ\",\n                    \"value\": \"Q1\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": "{{deploymentUrlIorBb}}"
					},
					"response": []
				},
				{
					"name": "POST Inference SOC BB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"const response = JSON.parse(responseBody);\r",
									"var request = JSON.parse(pm.request.body);\r",
									"var topN = request.topN;\r",
									"var numObjects = request.objects.length;\r",
									"\r",
									"// Validate that we obtained the correct number of predictions per level\r",
									"pm.test(\"Number of inference requests is \" + numObjects, function () {\r",
									"    pm.expect(response.predictions.length).to.eql(numObjects)\r",
									"});\r",
									"\r",
									"// Check that each label has topN predictions\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    for (j = 0; j < topN - 1; j++) {\r",
									"        console.log(`${i} ${j}`)\r",
									"        console.log(response.predictions[i].labels[j].results);\r",
									"        // if (response.predictions[i].labels[j].results.length != topN) {\r",
									"        //     result = false;\r",
									"        //     break;\r",
									"        // }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Number of predictions for every request is \" + topN, function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// Check that objectId is preserved for all input objects\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    if ('objectId' in request.objects[i]) {\r",
									"        var expectedObjectId = request.objects[i].objectId;\r",
									"        console.log(\"Expected objectId: \" + expectedObjectId);\r",
									"        if (response.predictions[i].objectId !== expectedObjectId) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"ObjectIds were preserved if submitted\", function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topN\": 3,\n    \"objects\": [\n        {\n            \"objectId\": \"optional-identifier-1\",\n            \"features\": [\n                    {\"name\": \"SALESORDERTYPE\", \"value\": \"SOT_2\"},\n                    {\"name\": \"SALESORGANIZATION\", \"value\": \"SOO_2\"},\n                    {\"name\": \"DISTRIBUTIONCHANNEL\", \"value\": \"DC_2\"},\n                    {\"name\": \"ORGANIZATIONDIVISION\", \"value\": \"OD_1\"},\n                    {\"name\": \"MATERIAL\", \"value\": \"M_2\"}\n                ]\n        },\n        {\n            \"objectId\": \"optional-identifier-2\",\n            \"features\": [\n                    {\"name\": \"SALESORDERTYPE\", \"value\": \"SOT_1\"},\n                    {\"name\": \"SALESORGANIZATION\", \"value\": \"SOO_2\"},\n                    {\"name\": \"DISTRIBUTIONCHANNEL\", \"value\": \"DC_3\"},\n                    {\"name\": \"ORGANIZATIONDIVISION\", \"value\": \"OD_1\"},\n                    {\"name\": \"MATERIAL\", \"value\": \"M_2\"}\n                ]\n        }\n    ]\n}"
						},
						"url": "{{deploymentUrlSocBb}}"
					},
					"response": []
				},
				{
					"name": "POST Inference Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"const response = JSON.parse(responseBody);\r",
									"var request = JSON.parse(pm.request.body);\r",
									"var topN = request.topN;\r",
									"var numObjects = request.objects.length;\r",
									"\r",
									"// Validate that we obtained the correct number of predictions per level\r",
									"pm.test(\"Number of inference requests is \" + numObjects, function () {\r",
									"    pm.expect(response.predictions.length).to.eql(numObjects)\r",
									"});\r",
									"\r",
									"// Check that each label has topN predictions\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    for (j = 0; j < topN - 1; j++) {\r",
									"        console.log(`${i} ${j}`)\r",
									"        console.log(response.predictions[i].labels[j].results);\r",
									"        // if (response.predictions[i].labels[j].results.length != topN) {\r",
									"        //     result = false;\r",
									"        //     break;\r",
									"        // }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Number of predictions for every request is \" + topN, function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// Check that objectId is preserved for all input objects\r",
									"result = true;\r",
									"for (i = 0; i < numObjects; i++) {\r",
									"    if ('objectId' in request.objects[i]) {\r",
									"        var expectedObjectId = request.objects[i].objectId;\r",
									"        console.log(\"Expected objectId: \" + expectedObjectId);\r",
									"        if (response.predictions[i].objectId !== expectedObjectId) {\r",
									"            result = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"ObjectIds were preserved if submitted\", function () {\r",
									"    pm.expect(result).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"topN\": 1,\n\t\"objects\": [\n      {\n          \"objectId\": \"optional-identifier-1\",\n          \"features\": [\n              {\"name\": \"manufacturer\", \"value\": \"Energizer\"},\n              {\"name\": \"description\", \"value\": \"Alkaline batteries; 1.5V\"}\n          ]\n      },\n      {\n          \"objectId\": \"optional-identifier-2\",\n          \"features\": [\n              {\"name\": \"manufacturer\", \"value\": \"Eidos\"},\n              {\n                  \"name\": \"description\",\n                  \"value\": \"Unravel a grim conspiracy at the brink of Revolution\"\n              }\n          ]\n      }\n  ]\n}\n"
						},
						"url": "{{deploymentUrlRegression}}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let testScript = `",
					"",
					"",
					"",
					"// LATEST VERSION: https://github.wdf.sap.corp/ML-Leonardo/ML-MEH-Postman-Common",
					"",
					"let DEBUG = true;",
					"",
					"/**",
					" * Polls a request until a given @successFunction returns true",
					" * or until the maximum number of iterations has been reached",
					" *",
					" * The request will be re-run repeatedly with a delay given by",
					" * the @sleepPeriod parameter.",
					" *",
					" * This function will access the PostMan-internal pm variable to determine",
					" * the current request.",
					" *",
					" * Returns true when polling has reached the maximum number of iterations",
					" * or when the successFunction returns true. This is useful to indicate",
					" * whether control flow should continue or if pollUntilTrue will do at least",
					" * one more iteration.",
					" *",
					" * Note the asynchronous nature of this function: it will (if required) simply re-enqueue",
					" * the current request and then return control to the caller. If e.g. tests must only run",
					" * after polling is done, then the return value must be checked!",
					" *",
					" * @param successFunction nullary function returning a boolean",
					" * @param numberOfIterations Maximum number of request polls",
					" * @param sleepPeriod Seconds to sleep between polls",
					" * @returns {boolean} true if successFunction succeeded, false is max number of iterations has been hit",
					" */",
					"function pollUntilTrueOrExpired(successFunction, numberOfIterations = 10, sleepPeriod = 30) {",
					"    if (hasReachedMaximumCount(numberOfIterations, 'poll')) {",
					"        if (DEBUG) {",
					"            console.log('Reached maximum iteration count. Returning true to indicate polling is done!')",
					"        }",
					"        return true;",
					"    }",
					"",
					"    let success = successFunction();",
					"    if (success) {",
					"        if (DEBUG) {",
					"            console.log('successFunction returned true!')",
					"        }",
					"        return true;",
					"    }",
					"",
					"    if (DEBUG) {",
					"        console.log('successFunction returned false! Enqueueing request again.')",
					"    }",
					"    enqueueCurrentRequestAsNextRequest();",
					"",
					"    delayNextRequest(sleepPeriod);",
					"",
					"    return false;",
					"}",
					"",
					"/**",
					" *",
					" * Keeps track of its own invocations in context of a given request.",
					" *",
					" * This function will return true until has been called @maximumCount times.",
					" * After that invocation, it will return false on subsequent invocations.",
					" *",
					" * State is maintained in PostMan's pm.variables and thus valid for one Postman iteration.",
					" * This function internally uses the name of the current request to maintain state.",
					" *",
					" * Supply a different @name parameter to have multiple counters.",
					" *",
					" *",
					" * @param maximumCount After this many invocations, false will be returned",
					" * @param name Optional: name of the counter",
					" * @returns {boolean} True until called maximumCount times.",
					" */",
					"function hasReachedMaximumCount(maximumCount, name = 'default') {",
					"    let counterName = '__counter__' + name + '__' + pm.info.requestId;",
					"    if (!pm.variables.has(counterName)) {",
					"        pm.variables.set(counterName, 0);",
					"    }",
					"    pm.variables.set(counterName, pm.variables.get(counterName) + 1);",
					"    let currentCounter = pm.variables.get(counterName);",
					"    if (DEBUG) {",
					"        console.log('Current counter: ' + currentCounter);",
					"    }",
					"",
					"    return currentCounter > maximumCount;",
					"}",
					"",
					"/**",
					" *",
					" * Reruns the current request again.",
					" *",
					" */",
					"function enqueueCurrentRequestAsNextRequest() {",
					"    if (DEBUG) {",
					"        console.log('enqueueCurrentRequestAsNextRequest');",
					"    }",
					"    postman.setNextRequest(pm.info.requestId);",
					"}",
					"",
					"/**",
					" * Sleeps for @seconds seconds.",
					" *",
					" * @param seconds",
					" */",
					"function delayNextRequest(seconds) {",
					"    setTimeout(function () {}, seconds * 1000);",
					"}",
					"",
					"`",
					"",
					"pm.environment.set('__test_library__', testScript);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Returns true if the current responseCode is 400 or higher.",
					" * @returns {boolean}",
					" */",
					"function isResponseNotOk() {",
					"    return responseCode.code > 399;",
					"}",
					"",
					"/**",
					" *",
					" * Logs text to console.",
					" *",
					" * Strings containing newlines are split and printed in multiple console.warn statements.",
					" *",
					" * @param someText Text to be printed",
					" * @param prefix Additional prefix, added to standard '**' prefix",
					" * @param raw Skips automatic prefixing.",
					" */",
					"function logText(someText = '', prefix = '', raw = false) {",
					"    if (someText === null || typeof(someText) === \"undefined\") {",
					"        someText = '';",
					"    }",
					"    someText.split('\\n').forEach(",
					"        function (singleLine) {",
					"            if (prefix && raw) {",
					"                throw Error('Cannot have both prefix and raw arguments!');",
					"            }",
					"",
					"            let linePrefix = '';",
					"",
					"            if (!raw) {",
					"                linePrefix = '** ';",
					"            }",
					"            // Add additional user prefix",
					"            if (prefix !== '' && prefix !== null) {",
					"                // Add space after prefix",
					"                linePrefix += prefix + ' ';",
					"            }",
					"            console.warn(linePrefix + singleLine);",
					"        }",
					"    );",
					"}",
					"",
					"/**",
					" * Prints a single Header instance to console.",
					" *",
					" * @param aHeader Postman API Header instance",
					" */",
					"function printSingleHeader(aHeader) {",
					"    logText(aHeader.key + ': ' + aHeader.value, '-');",
					"}",
					"",
					"/**",
					" * Prints a nice line containing only '*'.",
					" */",
					"function printSeparator() {",
					"    console.warn('*'.repeat(80));",
					"}",
					"",
					"",
					"/**",
					" * Logs details on request and response to console if the response",
					" * is not OK.",
					" */",
					"function logRequestOnFailure() {",
					"",
					"    if (isResponseNotOk()) {",
					"        printSeparator();",
					"        logText('Request URL:' + pm.request.url);",
					"        logText('Request headers:');",
					"        pm.request.headers.each(",
					"            printSingleHeader",
					"        );",
					"        if (pm.request.body) {",
					"            logText('Request body:');",
					"            logText(pm.request.body.toString(), '', true);",
					"        }",
					"        logText('Response code: ' + pm.response.code);",
					"        logText('Response size: ' + pm.response.size());",
					"        logText('Response time: ' + pm.response.responseTime + 'ms');",
					"        logText('Response headers:');",
					"        pm.response.headers.each(",
					"            printSingleHeader",
					"        );",
					"        if (pm.response.body) {",
					"            logText('Response body');",
					"            logText(pm.response.body, '', true);",
					"        }",
					"        printSeparator();",
					"    }",
					"}",
					"",
					"// The following line activates the debug log.",
					"logRequestOnFailure()",
					"",
					"/**",
					" * Tests if in case of failure (http code >399) response body contains",
					" * correlation id (\"X-Correlation-ID\").",
					" *",
					" */",
					"function isMessageAString(jsonData) {",
					"    return typeof jsonData.message === 'string';",
					"}",
					"",
					"function isCorrelationIdInvalid(jsonData) {",
					"    return jsonData.message.includes(\"Provided X-Correlation-ID header contains invalid value\");",
					"}",
					"",
					"function checkCorrelationIdOnFailure() {",
					"",
					"    if (responseCode.code > 399) {",
					"        // check if the error was raised my HM services",
					"        if (pm.request.url.toString().includes(\"meh-\") ||",
					"            pm.request.url.toString().includes(\"dar-\") ||",
					"            pm.request.url.toString().includes(\"data-attribute-recommendation\")) {",
					"            var jsonData = {};",
					"            try {",
					"                // parse response body",
					"                jsonData = JSON.parse(responseBody);",
					"            } catch(err) {",
					"                  logText('Response is not a JSON');",
					"                  return;",
					"            }",
					"            // we do not return correlation id if it did not pass the validation",
					"            if (isMessageAString(jsonData) && isCorrelationIdInvalid(jsonData)) {",
					"                return;",
					"            }",
					"            pm.test(\"X-Correlation-ID is returned\", function() {",
					"                pm.expect(jsonData).to.have.property(\"X-Correlation-ID\") &&",
					"                pm.expect(jsonData[\"X-Correlation-ID\"]).not.equal(null);",
					"            });",
					"        }",
					"    }",
					"}",
					"",
					"// The following line activates the check for correlation id.",
					"checkCorrelationIdOnFailure();"
				]
			}
		}
	]
}